name: Manually triggered workflow

on:
  workflow_dispatch:
    inputs:
      scheme:
        description: 'scheme 例: dev、stg、uat、pro'
        required: true
        default: 'dev'

jobs:
  build-apk:
    name: Build apk
    runs-on: ubuntu-20.04

    steps:
      # check out 代码
      - name: check out
        uses: actions/checkout@v2

      # install java
      - name: install java
        uses: actions/setup-java@v1
        with:
          java-version: '12.x'

      # 设置github认证，为后续pod、pub get 私有库做准备
      - name: setup github ssh
        uses: webfactory/ssh-agent@v0.5.0
        with:
          ssh-private-key: ${{ secrets.SSH }}

      # 安装 flutter
      - name: install flutter
        uses: subosito/flutter-action@v1.4.0
        with:
          flutter-version: 1.20.2

      # 设置gradle缓存
      - name: setup gradle cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 设置pub缓存
      - name: setup pub cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.FLUTTER_HOME }}/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - run: flutter pub get

      # 打包apk
      - name: build apk
        run: flutter build apk

      # 进行归档
      - name: artifact apk
        uses: actions/upload-artifact@v2
        with:
          name: Artifact2
          path: |
            **/outputs/flutter-apk/*apk

  build-ios:
    name: Build  ios
    runs-on: macos-latest

    steps:
      # check out 代码
      - name: check out
        uses: actions/checkout@v2

      # install java
      - name: install java
        uses: actions/setup-java@v1
        with:
          java-version: '12.x'

      # 设置github认证，为后续pod、pub get 私有库做准备
      - name: setup github ssh
        uses: webfactory/ssh-agent@v0.5.0
        with:
          ssh-private-key: ${{ secrets.SSH }}

      # 设置ios打包所需的Provisioning Profile
      - name: Import Provisioning Profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "${{ secrets.PROVISIONING_PROFILE }}" > adhoc.mobileprovision.txt
          base64 --decode adhoc.mobileprovision.txt > ~/Library/MobileDevice/Provisioning\ Profiles/decoded.mobileprovision

      # 设置ios打包所需的p12
      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
          p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}

      # xcode 安装
      - name: install xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 12.2

      # 安装 flutter
      - name: install flutter
        uses: subosito/flutter-action@v1.4.0
        with:
          flutter-version: 1.20.2

      # 设置pod缓存
      - name: setup pod cache
        uses: actions/cache@v2
        with:
          path: Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      # 设置pub缓存
      - name: setup pub cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.FLUTTER_HOME }}/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - run: flutter pub get

      # 打包ipa
      - name: build ipa
        run: |
          flutter build ios --release --no-simulator --no-codesign
          cd ios
          fastlane build

      # 进行归档
      - name: artifact ipa
        uses: actions/upload-artifact@v2
        with:
          name: Artifact1
          path: |
            **/*.ipa

  slackNotification:
    needs: [build-apk, build-ios]
    name: slack notiy
    runs-on: ubuntu-20.04
    steps:
      - name: Slack Notification
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: flutter
          SLACK_WEBHOOK: ${{ secrets.SLACK_FLUTTER_WEBHOOK }}
          SLACK_COLOR: good
          SLACK_ICON: https://avatars0.githubusercontent.com/u/44036562?s=100&v=4
          SLACK_USERNAME: Github Action
          SLACK_TITLE: "`flutter getx demo`"
          SLACK_MESSAGE: ':pensive:最新アプリをビルド失敗しました:pensive:\n*scheme:* `${{ github.event.inputs.scheme }}`'
      - name: Slack Notification
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: flutter
          SLACK_WEBHOOK: ${{ secrets.SLACK_FLUTTER_WEBHOOK }}
          SLACK_COLOR: danger
          SLACK_ICON: https://avatars0.githubusercontent.com/u/44036562?s=100&v=4
          SLACK_USERNAME: Github Action
          SLACK_TITLE: "`flutter getx demo`"
          SLACK_MESSAGE: ':pensive:最新アプリをビルド失敗しました:pensive:\n*scheme:* `${{ github.event.inputs.scheme }}`'